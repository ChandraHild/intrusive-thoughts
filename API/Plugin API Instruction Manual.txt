Before you get started writing IT plugins, it's vital that you turn on the Firestorm preprocessor, as it is required for includes. Add the following defines to the top of your script to get started:

/////////////////////////////////////////////////////////////////////
#define IT_PLUGIN_REGISTER    -8000 // PLUGIN -> IT
#define IT_PLUGIN_RESPONSE    -8001 // IT -> PLUGIN
#define IT_PLUGIN_OWNERSAY    -8002 // PLUGIN -> IT
#define IT_PLUGIN_INFOREQUEST -8003 // IT -> PLUGIN
#define IT_PLUGIN_COMMAND     -8004 // IT -> PLUGIN
#define IT_PLUGIN_ALLOWSLAVE  -8005 // PLUGIN -> IT
#define IT_PLUGIN_ACK         -8006 // IT -> PLUGIN
#define IT_PLUGIN_LOCK        -8007 // IT -> PLUGIN
#define IT_PLUGIN_OBJECT      -8008 // IT -> PLUGIN
#define IT_PLUGIN_DESCRIPTION -8009 // PLUGIN -> IT
/////////////////////////////////////////////////////////////////////


1. Getting started.
In your state_entry, and only then, you should call the following function once per desired chat command:

        llMessageLinked(LINK_SET, IT_PLUGIN_REGISTER, llGetScriptName(), "chatcommand");

The API handler will respond with the IT_PLUGIN_RESPONSE call, once per requested chatcommand, as such:

        llMessageLinked(LINK_SET, IT_PLUGIN_RESPONSE, type + "," + scriptname + "," + chatcommand, assigneduuid);

Type will be either master or slave, depending on which device the script has been dropped into. 
Scriptname is your llGetScriptname(). 
Chatcommand is your chat command. 
Assigneduuid is an assigneduuid is a uuid you should save since it is your reference for further API calls.

NOTE: If your chat command is already taken, the assigned UUID will be NULL_KEY and you should re-register with a number appended to your chat command.

At this point, your plugin(s) will be listed in the /1plugin command on the Master, or /1<prefix>plugin command on the slave for the Owners.

You may, if you want, add a short description to be listed in front of the command. If not, the script name will be shown. It is done as such:

        llMessageLinked(LINK_SET, IT_PLUGIN_DESCRIPTION, description, assigneduuid);


2. Interacting with the user.
If the user clicks your link in the plugin list, you will get the following call:

        llMessageLinked(LINK_SET, IT_PLUGIN_INFOREQUEST, who, assigneduuid);

Who is either "primaryowner", "secondaryowner", or "slave", depending on who called the command. On an IT Master, this will always be "primaryowner" and on an IT Slave, it will only be "slave" if you have allowed the command for the wearer.
Assigneduuid is the uuid of the chat command clicked.

At this point, you should compile a help message that explains the settings and commands your plugin supports. Whenever you include %COMMAND% in this text, it will be replaced with the command needed to reach your plugin. For example, take the following text when you have registered with the chat command test:

        "This is a test plugin, type '%COMMAND% nothing' to do absolutely nothing!"
        
On a master, it would likely be replaced with:

        "This is a test plugin, type '/1test nothing' to do absolutely nothing!"
        
While on a slave it might become:

        "This is a test plugin, type '/1hatest nothing' to do absolutely nothing!"
        
In addition to %COMMAND%, there is also %APPCOMMAND%. This will be replaced with a clickable link, which might be useful if you do not require extra parameters in the command for ease of use. It is used like this. Note the extra spaces:

        "Click [%APPCOMMAND%" + llEscapeURL(" nothing 5") + " here] to do nothing five times."
        
When you have compiled the text, reply as such:

        llMessageLinked(LINK_SET, IT_PLUGIN_OWNERSAY, text, assigneduuid);
        
It is vital that you use this call and do not llOwnerSay() yourself, because despite the name suggesting the wearer of the Master or Slave, it gets reported to whoever made the call.


3. Reacting to commands.
When the user types a chat command that begins with your prefix, it will be forwarded to you as such:

        llMessageLinked(LINK_SET, IT_PLUGIN_COMMAND, who + "," + assigneduuid, command);
        
Who is either "primaryowner", "secondaryowner", or "slave", depending on who called the command. On an IT Master, this will always be "primaryowner" and on an IT Slave, it will only be "slave" if you have allowed the command for the wearer.
Command is the entire command typed, except for the prefix.
Assigneduuid is the uuid of the chat command prefix.

You are not required to respond to this in any way, but just like with an INFOREQUEST, you can respond using an OWNERSAY call.


4. Allowing the slave access.
If you want the wearer of the IT Slave to be able to access the commands as well, make the following call:

        llMessageLinked(LINK_SET, IT_PLUGIN_ALLOWSLAVE, allow, assigneduuid);
        
With allow being either "1" for yes, or "0" for no. On an IT Master, this command will do nothing.


5. Getting feedback.
Correctly executed OWNERSAY, ALLOWSLAVE and DESCRIPTION will get the following response:

        llMessageLinked(LINK_SET, IT_PLUGIN_ACK, "OK", assigneduuid);
        
If the assigneduuid exists, but there was something wrong with your command, the response will be:

        llMessageLinked(LINK_SET, IT_PLUGIN_ACK, failreason, assigneduuid);
        
If assigneduuid does not exist, there will be no response.


6. Who does the hud have locked? What object am I looking at?
If running on a Master, you will get the following two messages whenever the relevant information changes:

        llMessageLinked(LINK_SET, IT_PLUGIN_LOCK, name, uuid);
        llMessageLinked(LINK_SET, IT_PLUGIN_OBJECT, name, uuid);

If name == "", it means you're looking at nothing, or there is no avatar locked.

Upon attaching, you must clear both the locked avatar and the looked at object.


6. Other rules and guidelines:
        - Do not listen on channel 1. The API will handle this for you.
        - If you need a listener, use a number from -2147483648 to -2000000000 or a number from 2000000000 to 2147483646.
        - Do not llOwnerSay().
        - Link messages for plugins to react to are only in the range -8000 to -8999.
        - Plugins may use link message numbers above 1. Negative numbers are reserved for the IT system.
        - A hard reset of the HUD or Slave will reset your script.
        - A transfer of the Slave will reset your script.